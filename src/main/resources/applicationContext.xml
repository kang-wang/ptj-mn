<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">    <!-- 加载配置文件 -->    <context:property-placeholder location="classpath:datasource.properties" />    <context:component-scan base-package="com.ptj.redis"/>    <!-- 配置jedis连接池 -->    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">        <!-- 最大连接数 -->        <property name="maxTotal" value="30" />        <!-- 最大空闲连接数 -->        <property name="maxIdle" value="10" />        <!-- 每次释放连接的最大数目 -->        <property name="numTestsPerEvictionRun" value="1024" />        <!-- 释放连接的扫描间隔（毫秒） -->        <property name="timeBetweenEvictionRunsMillis" value="30000" />        <!-- 连接最小空闲时间 -->        <property name="minEvictableIdleTimeMillis" value="1800000" />        <!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->        <property name="softMinEvictableIdleTimeMillis" value="10000" />        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->        <property name="maxWaitMillis" value="1500" />        <!-- 在获取连接的时候检查有效性, 默认false -->        <property name="testOnBorrow" value="true" />        <!-- 在空闲时检查有效性, 默认false -->        <property name="testWhileIdle" value="true" />        <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->        <property name="blockWhenExhausted" value="false" />    </bean>    <!-- jedisCluster -->    <bean id="jedisClients" class="redis.clients.jedis.JedisCluster">        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>        <constructor-arg name="nodes">            <set>                <bean class="redis.clients.jedis.HostAndPort">                    <constructor-arg name="host" value="120.78.144.241"/>                    <constructor-arg name="port" value="7001"/>                </bean>                <bean class="redis.clients.jedis.HostAndPort">                    <constructor-arg name="host" value="120.78.144.241"/>                    <constructor-arg name="port" value="7002"/>                </bean>                <bean class="redis.clients.jedis.HostAndPort">                    <constructor-arg name="host" value="120.78.144.241"/>                    <constructor-arg name="port" value="7003"/>                </bean>                <bean class="redis.clients.jedis.HostAndPort">                    <constructor-arg name="host" value="120.78.144.241"/>                    <constructor-arg name="port" value="7004"/>                </bean>                <bean class="redis.clients.jedis.HostAndPort">                    <constructor-arg name="host" value="120.78.144.241"/>                    <constructor-arg name="port" value="7005"/>                </bean>                <bean class="redis.clients.jedis.HostAndPort">                    <constructor-arg name="host" value="120.78.144.241"/>                    <constructor-arg name="port" value="7006"/>                </bean>            </set>        </constructor-arg>    </bean>    <!-- 可以扫描controller、service、...  这里让扫描controller，指定controller的包   -->    <!-- - - - - - 扫描业务层包，支持织入DAO - - - - - -->    <context:component-scan base-package="com.ptj.service"/>    <context:component-scan base-package="com.ptj.service.impl"/>    <context:component-scan base-package="com.ptj.dubbo.service"/>    <context:component-scan base-package="com.ptj.dubbo.service.impl"/>    <context:annotation-config/>    <aop:aspectj-autoproxy/>    <bean id="propertyConfigurer"          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">        <property name="order" value="2"/>        <property name="ignoreUnresolvablePlaceholders" value="true"/>        <property name="locations">            <list>                <value>classpath:datasource.properties</value>            </list>        </property>        <property name="fileEncoding" value="utf-8"/>    </bean>    <bean id="dataSource" class="com.ptj.util.XBasicDataSource" destroy-method="close">        <property name="driverClassName" value="${db.driverClassName}"/>        <property name="url" value="${db.url}"/>        <property name="username" value="${db.username}"/>        <property name="password" value="${db.password}"/>        <!-- 连接池启动时的初始值 -->        <property name="initialSize" value="${db.initialSize}"/>        <!-- 连接池的最大值 -->        <property name="maxActive" value="${db.maxActive}"/>        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->        <property name="maxIdle" value="${db.maxIdle}"/>        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->        <property name="minIdle" value="${db.minIdle}"/>        <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 -->        <property name="maxWait" value="${db.maxWait}"/>        <!--#给出一条简单的sql语句进行验证 -->        <!--<property name="validationQuery" value="select getdate()" />-->        <property name="defaultAutoCommit" value="${db.defaultAutoCommit}"/>        <!-- 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 -->        <!--<property name="removeAbandoned" value="true" />-->        <!-- 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 -->        <!--<property name="removeAbandonedTimeout" value="120" />-->        <!-- #连接的超时时间，默认为半小时。 -->        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>        <!--# 失效检查线程运行时间间隔，要小于MySQL默认-->        <property name="timeBetweenEvictionRunsMillis" value="40000"/>        <!--# 检查连接是否有效-->        <property name="testWhileIdle" value="true"/>        <!--# 检查连接有效性的SQL语句-->        <property name="validationQuery" value="SELECT 1 FROM dual"/>    </bean>    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">        <property name="dataSource" ref="dataSource"/>        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>        <property name="configLocation" value="classpath:mybatis-config.xml"/>        <!-- 分页插件 -->        <property name="plugins">            <array>                <bean class="com.github.pagehelper.PageHelper">                    <property name="properties">                        <value>                            dialect=mysql                        </value>                    </property>                </bean>            </array>        </property>    </bean>    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">        <property name="basePackage" value="com.ptj.dao"/>    </bean>    <!-- 事务管理 -->    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >        <property name="dataSource" ref="dataSource"/>        <property name="rollbackOnCommitFailure" value="true"/>    </bean>    <!-- 事务通知 -->    <tx:advice id="txAdvice" transaction-manager="transactionManager">        <tx:attributes>            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>        </tx:attributes>    </tx:advice>    <!-- aop -->    <aop:config>        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.ptj.*.service.*.*(..))"/>    </aop:config></beans>